{"/home/travis/build/npmtest/node-npmtest-node-cache/test.js":"/* istanbul instrument in package npmtest_node_cache */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-cache/lib.npmtest_node_cache.js":"/* istanbul instrument in package npmtest_node_cache */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_cache = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_cache = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-cache/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-cache && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_cache */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_cache\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_cache.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_cache.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_cache.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_cache.__dirname + '/lib.npmtest_node_cache.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-cache/node_modules/node-cache/index.js":"/*\n * node-cache 4.1.0 ( 2016-12-21 )\n * https://github.com/mpneuried/nodecache\n *\n * Released under the MIT license\n * https://github.com/mpneuried/nodecache/blob/master/LICENSE\n *\n * Maintained by M. Peter ( https://github.com/mpneuried )\n*/\n(function() {\n  var exports;\n\n  exports = module.exports = require('./lib/node_cache');\n\n  exports.version = '4.1.0';\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-node-cache/node_modules/node-cache/lib/node_cache.js":"/*\n * node-cache 4.1.0 ( 2016-12-21 )\n * https://github.com/mpneuried/nodecache\n *\n * Released under the MIT license\n * https://github.com/mpneuried/nodecache/blob/master/LICENSE\n *\n * Maintained by M. Peter ( https://github.com/mpneuried )\n*/\n(function() {\n  var EventEmitter, NodeCache, _assignIn, _isArray, _isFunction, _isNumber, _isObject, _isString, _size, _template, clone,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty,\n    slice = [].slice,\n    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\n  _assignIn = require(\"lodash/assignIn\");\n\n  _isArray = require(\"lodash/isArray\");\n\n  _isString = require(\"lodash/isString\");\n\n  _isFunction = require(\"lodash/isFunction\");\n\n  _isNumber = require(\"lodash/isNumber\");\n\n  _isObject = require(\"lodash/isObject\");\n\n  _size = require(\"lodash/size\");\n\n  _template = require(\"lodash/template\");\n\n  clone = require(\"clone\");\n\n  EventEmitter = require('events').EventEmitter;\n\n  module.exports = NodeCache = (function(superClass) {\n    extend(NodeCache, superClass);\n\n    function NodeCache(options) {\n      this.options = options != null ? options : {};\n      this._initErrors = bind(this._initErrors, this);\n      this._error = bind(this._error, this);\n      this._getValLength = bind(this._getValLength, this);\n      this._wrap = bind(this._wrap, this);\n      this._isInvalidKey = bind(this._isInvalidKey, this);\n      this._check = bind(this._check, this);\n      this._checkData = bind(this._checkData, this);\n      this.close = bind(this.close, this);\n      this.flushAll = bind(this.flushAll, this);\n      this.getStats = bind(this.getStats, this);\n      this.keys = bind(this.keys, this);\n      this.getTtl = bind(this.getTtl, this);\n      this.ttl = bind(this.ttl, this);\n      this.del = bind(this.del, this);\n      this.set = bind(this.set, this);\n      this.mget = bind(this.mget, this);\n      this.get = bind(this.get, this);\n      this._initErrors();\n      this.data = {};\n      this.options = _assignIn({\n        forceString: false,\n        objectValueSize: 80,\n        arrayValueSize: 40,\n        stdTTL: 0,\n        checkperiod: 600,\n        useClones: true,\n        errorOnMissing: false\n      }, this.options);\n      this.stats = {\n        hits: 0,\n        misses: 0,\n        keys: 0,\n        ksize: 0,\n        vsize: 0\n      };\n      this.validKeyTypes = [\"string\", \"number\"];\n      this._checkData();\n      return;\n    }\n\n    NodeCache.prototype.get = function(key, cb, errorOnMissing) {\n      var _err, _ret, err;\n      if (typeof cb === \"boolean\" && arguments.length === 2) {\n        errorOnMissing = cb;\n        cb = void 0;\n      }\n      if ((err = this._isInvalidKey(key)) != null) {\n        if (cb != null) {\n          cb(err);\n          return;\n        } else {\n          throw err;\n        }\n      }\n      if ((this.data[key] != null) && this._check(key, this.data[key])) {\n        this.stats.hits++;\n        _ret = this._unwrap(this.data[key]);\n        if (cb != null) {\n          cb(null, _ret);\n        }\n        return _ret;\n      } else {\n        this.stats.misses++;\n        if (this.options.errorOnMissing || errorOnMissing) {\n          _err = this._error(\"ENOTFOUND\", {\n            key: key\n          }, cb);\n          if (_err != null) {\n            throw _err;\n          }\n          return;\n        } else {\n          if (cb != null) {\n            cb(null, void 0);\n          }\n        }\n        return void 0;\n      }\n    };\n\n    NodeCache.prototype.mget = function(keys, cb) {\n      var _err, err, i, key, len, oRet;\n      if (!_isArray(keys)) {\n        _err = this._error(\"EKEYSTYPE\");\n        if (cb != null) {\n          cb(_err);\n        }\n        return _err;\n      }\n      oRet = {};\n      for (i = 0, len = keys.length; i < len; i++) {\n        key = keys[i];\n        if ((err = this._isInvalidKey(key)) != null) {\n          if (cb != null) {\n            cb(err);\n            return;\n          } else {\n            throw err;\n          }\n        }\n        if ((this.data[key] != null) && this._check(key, this.data[key])) {\n          this.stats.hits++;\n          oRet[key] = this._unwrap(this.data[key]);\n        } else {\n          this.stats.misses++;\n        }\n      }\n      if (cb != null) {\n        cb(null, oRet);\n      }\n      return oRet;\n    };\n\n    NodeCache.prototype.set = function(key, value, ttl, cb) {\n      var err, existent;\n      if (this.options.forceString && !_isString(value)) {\n        value = JSON.stringify(value);\n      }\n      if (arguments.length === 3 && _isFunction(ttl)) {\n        cb = ttl;\n        ttl = this.options.stdTTL;\n      }\n      if ((err = this._isInvalidKey(key)) != null) {\n        if (cb != null) {\n          cb(err);\n          return;\n        } else {\n          throw err;\n        }\n      }\n      existent = false;\n      if (this.data[key]) {\n        existent = true;\n        this.stats.vsize -= this._getValLength(this._unwrap(this.data[key], false));\n      }\n      this.data[key] = this._wrap(value, ttl);\n      this.stats.vsize += this._getValLength(value);\n      if (!existent) {\n        this.stats.ksize += this._getKeyLength(key);\n        this.stats.keys++;\n      }\n      this.emit(\"set\", key, value);\n      if (cb != null) {\n        cb(null, true);\n      }\n      return true;\n    };\n\n    NodeCache.prototype.del = function(keys, cb) {\n      var delCount, err, i, key, len, oldVal;\n      if (!_isArray(keys)) {\n        keys = [keys];\n      }\n      delCount = 0;\n      for (i = 0, len = keys.length; i < len; i++) {\n        key = keys[i];\n        if ((err = this._isInvalidKey(key)) != null) {\n          if (cb != null) {\n            cb(err);\n            return;\n          } else {\n            throw err;\n          }\n        }\n        if (this.data[key] != null) {\n          this.stats.vsize -= this._getValLength(this._unwrap(this.data[key], false));\n          this.stats.ksize -= this._getKeyLength(key);\n          this.stats.keys--;\n          delCount++;\n          oldVal = this.data[key];\n          delete this.data[key];\n          this.emit(\"del\", key, oldVal.v);\n        } else {\n          this.stats.misses++;\n        }\n      }\n      if (cb != null) {\n        cb(null, delCount);\n      }\n      return delCount;\n    };\n\n    NodeCache.prototype.ttl = function() {\n      var arg, args, cb, err, i, key, len, ttl;\n      key = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n      for (i = 0, len = args.length; i < len; i++) {\n        arg = args[i];\n        switch (typeof arg) {\n          case \"number\":\n            ttl = arg;\n            break;\n          case \"function\":\n            cb = arg;\n        }\n      }\n      ttl || (ttl = this.options.stdTTL);\n      if (!key) {\n        if (cb != null) {\n          cb(null, false);\n        }\n        return false;\n      }\n      if ((err = this._isInvalidKey(key)) != null) {\n        if (cb != null) {\n          cb(err);\n          return;\n        } else {\n          throw err;\n        }\n      }\n      if ((this.data[key] != null) && this._check(key, this.data[key])) {\n        if (ttl >= 0) {\n          this.data[key] = this._wrap(this.data[key].v, ttl, false);\n        } else {\n          this.del(key);\n        }\n        if (cb != null) {\n          cb(null, true);\n        }\n        return true;\n      } else {\n        if (cb != null) {\n          cb(null, false);\n        }\n        return false;\n      }\n    };\n\n    NodeCache.prototype.getTtl = function(key, cb) {\n      var _ttl, err;\n      if (!key) {\n        if (cb != null) {\n          cb(null, void 0);\n        }\n        return void 0;\n      }\n      if ((err = this._isInvalidKey(key)) != null) {\n        if (cb != null) {\n          cb(err);\n          return;\n        } else {\n          throw err;\n        }\n      }\n      if ((this.data[key] != null) && this._check(key, this.data[key])) {\n        _ttl = this.data[key].t;\n        if (cb != null) {\n          cb(null, _ttl);\n        }\n        return _ttl;\n      } else {\n        if (cb != null) {\n          cb(null, void 0);\n        }\n        return void 0;\n      }\n    };\n\n    NodeCache.prototype.keys = function(cb) {\n      var _keys;\n      _keys = Object.keys(this.data);\n      if (cb != null) {\n        cb(null, _keys);\n      }\n      return _keys;\n    };\n\n    NodeCache.prototype.getStats = function() {\n      return this.stats;\n    };\n\n    NodeCache.prototype.flushAll = function(_startPeriod) {\n      if (_startPeriod == null) {\n        _startPeriod = true;\n      }\n      this.data = {};\n      this.stats = {\n        hits: 0,\n        misses: 0,\n        keys: 0,\n        ksize: 0,\n        vsize: 0\n      };\n      this._killCheckPeriod();\n      this._checkData(_startPeriod);\n      this.emit(\"flush\");\n    };\n\n    NodeCache.prototype.close = function() {\n      this._killCheckPeriod();\n    };\n\n    NodeCache.prototype._checkData = function(startPeriod) {\n      var key, ref, value;\n      if (startPeriod == null) {\n        startPeriod = true;\n      }\n      ref = this.data;\n      for (key in ref) {\n        value = ref[key];\n        this._check(key, value);\n      }\n      if (startPeriod && this.options.checkperiod > 0) {\n        this.checkTimeout = setTimeout(this._checkData, this.options.checkperiod * 1000, startPeriod);\n        if (this.checkTimeout.unref != null) {\n          this.checkTimeout.unref();\n        }\n      }\n    };\n\n    NodeCache.prototype._killCheckPeriod = function() {\n      if (this.checkTimeout != null) {\n        return clearTimeout(this.checkTimeout);\n      }\n    };\n\n    NodeCache.prototype._check = function(key, data) {\n      if (data.t !== 0 && data.t < Date.now()) {\n        this.del(key);\n        this.emit(\"expired\", key, this._unwrap(data));\n        return false;\n      } else {\n        return true;\n      }\n    };\n\n    NodeCache.prototype._isInvalidKey = function(key) {\n      var ref;\n      if (ref = typeof key, indexOf.call(this.validKeyTypes, ref) < 0) {\n        return this._error(\"EKEYTYPE\", {\n          type: typeof key\n        });\n      }\n    };\n\n    NodeCache.prototype._wrap = function(value, ttl, asClone) {\n      var livetime, now, oReturn, ttlMultiplicator;\n      if (asClone == null) {\n        asClone = true;\n      }\n      if (!this.options.useClones) {\n        asClone = false;\n      }\n      now = Date.now();\n      livetime = 0;\n      ttlMultiplicator = 1000;\n      if (ttl === 0) {\n        livetime = 0;\n      } else if (ttl) {\n        livetime = now + (ttl * ttlMultiplicator);\n      } else {\n        if (this.options.stdTTL === 0) {\n          livetime = this.options.stdTTL;\n        } else {\n          livetime = now + (this.options.stdTTL * ttlMultiplicator);\n        }\n      }\n      return oReturn = {\n        t: livetime,\n        v: asClone ? clone(value) : value\n      };\n    };\n\n    NodeCache.prototype._unwrap = function(value, asClone) {\n      if (asClone == null) {\n        asClone = true;\n      }\n      if (!this.options.useClones) {\n        asClone = false;\n      }\n      if (value.v != null) {\n        if (asClone) {\n          return clone(value.v);\n        } else {\n          return value.v;\n        }\n      }\n      return null;\n    };\n\n    NodeCache.prototype._getKeyLength = function(key) {\n      return key.length;\n    };\n\n    NodeCache.prototype._getValLength = function(value) {\n      if (_isString(value)) {\n        return value.length;\n      } else if (this.options.forceString) {\n        return JSON.stringify(value).length;\n      } else if (_isArray(value)) {\n        return this.options.arrayValueSize * value.length;\n      } else if (_isNumber(value)) {\n        return 8;\n      } else if (_isObject(value)) {\n        return this.options.objectValueSize * _size(value);\n      } else {\n        return 0;\n      }\n    };\n\n    NodeCache.prototype._error = function(type, data, cb) {\n      var error;\n      if (data == null) {\n        data = {};\n      }\n      error = new Error();\n      error.name = type;\n      error.errorcode = type;\n      error.message = this.ERRORS[type] != null ? this.ERRORS[type](data) : \"-\";\n      error.data = data;\n      if (cb && _isFunction(cb)) {\n        cb(error, null);\n      } else {\n        return error;\n      }\n    };\n\n    NodeCache.prototype._initErrors = function() {\n      var _errMsg, _errT, ref;\n      this.ERRORS = {};\n      ref = this._ERRORS;\n      for (_errT in ref) {\n        _errMsg = ref[_errT];\n        this.ERRORS[_errT] = _template(_errMsg);\n      }\n    };\n\n    NodeCache.prototype._ERRORS = {\n      \"ENOTFOUND\": \"Key `<%= key %>` not found\",\n      \"EKEYTYPE\": \"The key argument has to be of type `string` or `number`. Found: `<%= type %>`\",\n      \"EKEYSTYPE\": \"The keys argument has to be an array.\"\n    };\n\n    return NodeCache;\n\n  })(EventEmitter);\n\n}).call(this);\n"}